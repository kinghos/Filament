[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "django",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django",
        "description": "django",
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "loader",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "RPi.GPIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "RPi.GPIO",
        "description": "RPi.GPIO",
        "detail": "RPi.GPIO",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Filament.Filament.asgi",
        "description": "Filament.Filament.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "Filament.Filament.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-swaiw)6=q2n+%y1+rj)$nwwwi6lzwh@m7ian^0!3$s#m7s)dl^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-swaiw)6=q2n+%y1+rj)$nwwwi6lzwh@m7ian^0!3$s#m7s)dl^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'light_monitoring.apps.LightMonitoringConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'light_monitoring.apps.LightMonitoringConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'light_monitoring.apps.LightMonitoringConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'light_monitoring.apps.LightMonitoringConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'Filament.urls'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "ROOT_URLCONF = 'Filament.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "WSGI_APPLICATION = 'Filament.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "Filament.Filament.settings",
        "description": "Filament.Filament.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "Filament.Filament.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Filament.Filament.urls",
        "description": "Filament.Filament.urls",
        "peekOfCode": "urlpatterns = [\n    path('home/', include('light_monitoring.urls')),\n    path('admin/', admin.site.urls),\n]",
        "detail": "Filament.Filament.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "Filament.Filament.wsgi",
        "description": "Filament.Filament.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "Filament.Filament.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Filament.light_monitoring.migrations.0001_initial",
        "description": "Filament.light_monitoring.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Data_Entry',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('unixTimestamp', models.DecimalField(decimal_places=7, max_digits=18)),",
        "detail": "Filament.light_monitoring.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "Filament.light_monitoring.migrations.0002_remove_data_entry_ismotion_and_more",
        "description": "Filament.light_monitoring.migrations.0002_remove_data_entry_ismotion_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('light_monitoring', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='data_entry',\n            name='isMotion',\n        ),\n        migrations.RemoveField(",
        "detail": "Filament.light_monitoring.migrations.0002_remove_data_entry_ismotion_and_more",
        "documentation": {}
    },
    {
        "label": "LightMonitoringConfig",
        "kind": 6,
        "importPath": "Filament.light_monitoring.apps",
        "description": "Filament.light_monitoring.apps",
        "peekOfCode": "class LightMonitoringConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'light_monitoring'",
        "detail": "Filament.light_monitoring.apps",
        "documentation": {}
    },
    {
        "label": "fetchData",
        "kind": 2,
        "importPath": "Filament.light_monitoring.dataSaving",
        "description": "Filament.light_monitoring.dataSaving",
        "peekOfCode": "def fetchData(): # Retrieves data from light sensing file; not implemented yet\n    # Placeholder vars\n    START_TIME = datetime.datetime.now() - datetime.timedelta(seconds=50)\n    END_TIME = datetime.datetime.now()\n    return START_TIME, END_TIME\nstart, end = fetchData()\nnewEntry = Data_Entry(startTime=start, endTime=end)\nprint(f\"Duration = {newEntry}\")\nnewEntry.save()",
        "detail": "Filament.light_monitoring.dataSaving",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Filament.light_monitoring.dataSaving",
        "description": "Filament.light_monitoring.dataSaving",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nsettings.configure(DATABASES= {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': BASE_DIR / 'db.sqlite3',\n        }})\ndjango.setup()\nfrom models import *\ndef fetchData(): # Retrieves data from light sensing file; not implemented yet\n    # Placeholder vars",
        "detail": "Filament.light_monitoring.dataSaving",
        "documentation": {}
    },
    {
        "label": "newEntry",
        "kind": 5,
        "importPath": "Filament.light_monitoring.dataSaving",
        "description": "Filament.light_monitoring.dataSaving",
        "peekOfCode": "newEntry = Data_Entry(startTime=start, endTime=end)\nprint(f\"Duration = {newEntry}\")\nnewEntry.save()",
        "detail": "Filament.light_monitoring.dataSaving",
        "documentation": {}
    },
    {
        "label": "print(f\"Duration",
        "kind": 5,
        "importPath": "Filament.light_monitoring.dataSaving",
        "description": "Filament.light_monitoring.dataSaving",
        "peekOfCode": "print(f\"Duration = {newEntry}\")\nnewEntry.save()",
        "detail": "Filament.light_monitoring.dataSaving",
        "documentation": {}
    },
    {
        "label": "Data_Entry",
        "kind": 6,
        "importPath": "Filament.light_monitoring.models",
        "description": "Filament.light_monitoring.models",
        "peekOfCode": "class Data_Entry(models.Model):\n    startTime = models.DateTimeField(default=None)\n    endTime = models.DateTimeField(default=None)\n    def __str__(self):\n        duration = self.endTime - self.startTime\n        return f\"{duration.total_seconds()} seconds\"\n    class Meta:\n        app_label  = 'light_monitoring'",
        "detail": "Filament.light_monitoring.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "Filament.light_monitoring.urls",
        "description": "Filament.light_monitoring.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.home, name='home'),\n]",
        "detail": "Filament.light_monitoring.urls",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "Filament.light_monitoring.views",
        "description": "Filament.light_monitoring.views",
        "peekOfCode": "def home(request):\n    duration_tot = 0\n    for i in Data_Entry.objects.all():\n        duration = i.endTime - i.startTime\n        duration_tot += duration.total_seconds()\n    template = loader.get_template(\"light_monitoring/home.html\")\n    context = {\n        'duration_tot': duration_tot,\n    }\n    return HttpResponse(template.render(context, request))",
        "detail": "Filament.light_monitoring.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Filament.manage",
        "description": "Filament.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Filament.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "Filament.manage",
        "documentation": {}
    },
    {
        "label": "getEmissionsRate",
        "kind": 2,
        "importPath": "emissionsCalc",
        "description": "emissionsCalc",
        "peekOfCode": "def getEmissionsRate():\n    response = requests.get('https://api.carbonintensity.org.uk/intensity', params={}, headers = headers)\n    emissionsDict = response.json()\n    with open(\"emissions.json\", \"w\") as f: # File is here for development purposes; not actually needed\n        f.seek(0) # Allows overwriting\n        json.dump(emissionsDict, f, indent=4) # Dumps json file\n    val = emissionsDict[\"data\"][0][\"intensity\"][\"actual\"]\n    return val if val != None else emissionsDict[\"data\"][0][\"intensity\"][\"forecast\"]\ndef getEmissions(power, numBulbs, time, emissions):\n    power /= 1000",
        "detail": "emissionsCalc",
        "documentation": {}
    },
    {
        "label": "getEmissions",
        "kind": 2,
        "importPath": "emissionsCalc",
        "description": "emissionsCalc",
        "peekOfCode": "def getEmissions(power, numBulbs, time, emissions):\n    power /= 1000\n    return power * numBulbs * time * emissions\nemissionRate = getEmissionsRate()\nprint(f\"{emissionRate}gCO₂/kWh\")\nprint(f\"{getEmissions(50, 1, 1, emissionRate)}g of CO₂\")",
        "detail": "emissionsCalc",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "emissionsCalc",
        "description": "emissionsCalc",
        "peekOfCode": "headers = {\n  'Accept': 'application/json'\n}\ndef getEmissionsRate():\n    response = requests.get('https://api.carbonintensity.org.uk/intensity', params={}, headers = headers)\n    emissionsDict = response.json()\n    with open(\"emissions.json\", \"w\") as f: # File is here for development purposes; not actually needed\n        f.seek(0) # Allows overwriting\n        json.dump(emissionsDict, f, indent=4) # Dumps json file\n    val = emissionsDict[\"data\"][0][\"intensity\"][\"actual\"]",
        "detail": "emissionsCalc",
        "documentation": {}
    },
    {
        "label": "emissionRate",
        "kind": 5,
        "importPath": "emissionsCalc",
        "description": "emissionsCalc",
        "peekOfCode": "emissionRate = getEmissionsRate()\nprint(f\"{emissionRate}gCO₂/kWh\")\nprint(f\"{getEmissions(50, 1, 1, emissionRate)}g of CO₂\")",
        "detail": "emissionsCalc",
        "documentation": {}
    },
    {
        "label": "roundTime",
        "kind": 2,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "def roundTime(date):\n    minute = date.minute\n    if minute < 15:\n        date = date.replace(minute=0, second=0, microsecond=0)\n    elif minute >= 15  and minute < 45:\n        date = date.replace(minute=30, second=0, microsecond=0)\n    elif minute >= 45:\n        date = date.replace(minute=0, second=0, microsecond=0)\n        date += timedelta(hours=1)\n    return date",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "getEnergyCosts",
        "kind": 2,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "def getEnergyCosts():\n    response = requests.get(API_URL, params={}, headers = HEADERS) # Gets the json from the url\n    priceDict = response.json()\n    with open(\"energyPrices.json\", \"w\") as f: # File is here for development purposes; not actually needed\n        f.seek(0) # Allows overwriting\n        json.dump(priceDict, f, indent=4) # Dumps json file\n    timeList = []\n    for dic in priceDict[\"data\"][\"data\"]:\n        timeList.append(dic[\"Timestamp\"])\n    index = -1",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "calcPrices",
        "kind": 2,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "def calcPrices(power, time, numBulbs, prices): # Takes power in watts and time in hours\n    power /= 1000 # Converts W to kW\n    return power * time * numBulbs * prices\n# At the time this is called, the price from the nearest time the previous day is returned\nenergyCosts = getEnergyCosts()\nprint(f\"Energy costs: £{energyCosts}/kWh\")\nprint(f\"Cost of usage: £{calcPrices(50, 1, 1, energyCosts):.2f} today\")",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "END_DATE",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "END_DATE = datetime.now() \nSTART_DATE = END_DATE - timedelta(days=1)\nEND_DATE = END_DATE.strftime(\"%d-%m-%Y\")\nSTART_DATE = START_DATE.strftime(\"%d-%m-%Y\")\nDNO = 12 # Regional code - defaults to 12 (London)\nVOLTAGE = \"LV\"\nHEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "START_DATE",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "START_DATE = END_DATE - timedelta(days=1)\nEND_DATE = END_DATE.strftime(\"%d-%m-%Y\")\nSTART_DATE = START_DATE.strftime(\"%d-%m-%Y\")\nDNO = 12 # Regional code - defaults to 12 (London)\nVOLTAGE = \"LV\"\nHEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "END_DATE",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "END_DATE = END_DATE.strftime(\"%d-%m-%Y\")\nSTART_DATE = START_DATE.strftime(\"%d-%m-%Y\")\nDNO = 12 # Regional code - defaults to 12 (London)\nVOLTAGE = \"LV\"\nHEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):\n    minute = date.minute",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "START_DATE",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "START_DATE = START_DATE.strftime(\"%d-%m-%Y\")\nDNO = 12 # Regional code - defaults to 12 (London)\nVOLTAGE = \"LV\"\nHEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):\n    minute = date.minute\n    if minute < 15:",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "DNO",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "DNO = 12 # Regional code - defaults to 12 (London)\nVOLTAGE = \"LV\"\nHEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):\n    minute = date.minute\n    if minute < 15:\n        date = date.replace(minute=0, second=0, microsecond=0)",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "VOLTAGE",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "VOLTAGE = \"LV\"\nHEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):\n    minute = date.minute\n    if minute < 15:\n        date = date.replace(minute=0, second=0, microsecond=0)\n    elif minute >= 15  and minute < 45:",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "HEADERS = {\n    'Accept':'application/json'\n}\nAPI_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):\n    minute = date.minute\n    if minute < 15:\n        date = date.replace(minute=0, second=0, microsecond=0)\n    elif minute >= 15  and minute < 45:\n        date = date.replace(minute=30, second=0, microsecond=0)",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "API_URL",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "API_URL = f\"https://odegdcpnma.execute-api.eu-west-2.amazonaws.com/development/prices?dno={DNO}&voltage={VOLTAGE}&start={START_DATE}&end={END_DATE}\"\ndef roundTime(date):\n    minute = date.minute\n    if minute < 15:\n        date = date.replace(minute=0, second=0, microsecond=0)\n    elif minute >= 15  and minute < 45:\n        date = date.replace(minute=30, second=0, microsecond=0)\n    elif minute >= 45:\n        date = date.replace(minute=0, second=0, microsecond=0)\n        date += timedelta(hours=1)",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "energyCosts",
        "kind": 5,
        "importPath": "energyPrices",
        "description": "energyPrices",
        "peekOfCode": "energyCosts = getEnergyCosts()\nprint(f\"Energy costs: £{energyCosts}/kWh\")\nprint(f\"Cost of usage: £{calcPrices(50, 1, 1, energyCosts):.2f} today\")",
        "detail": "energyPrices",
        "documentation": {}
    },
    {
        "label": "light",
        "kind": 2,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "def light(): # In the format (artificial, natural)\n    return (GPIO.input(photodiode_filtered) == 1, GPIO.input(uv) == 1)\ndef motion():\n    return GPIO.input(pir) == 1\ndef analysis(artificial_light, motion):\n    return artificial_light and not motion\nwhile True:\n    light = light()\n    artificial_light = light[0]\n    natural_light = light[1]",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "motion",
        "kind": 2,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "def motion():\n    return GPIO.input(pir) == 1\ndef analysis(artificial_light, motion):\n    return artificial_light and not motion\nwhile True:\n    light = light()\n    artificial_light = light[0]\n    natural_light = light[1]\n    motion = motion()\n    wasted_mins += int(analysis(artificial_light, motion)) * interval",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "analysis",
        "kind": 2,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "def analysis(artificial_light, motion):\n    return artificial_light and not motion\nwhile True:\n    light = light()\n    artificial_light = light[0]\n    natural_light = light[1]\n    motion = motion()\n    wasted_mins += int(analysis(artificial_light, motion)) * interval\n    time.sleep(interval)",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "wasted_mins",
        "kind": 5,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "wasted_mins = 0\ninterval = 2*60 # time in minutes\n# Pin numbers - change when connected\nphotodiode_filtered = 3\nuv = 4\npir = 5\n# NB: No need for photodiode to be connected \nGPIO.setmode(GPIO.BCM) # Not sure\nGPIO.setwarnings(False) # Not sure\n# Sets pins as digital in pins",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "interval",
        "kind": 5,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "interval = 2*60 # time in minutes\n# Pin numbers - change when connected\nphotodiode_filtered = 3\nuv = 4\npir = 5\n# NB: No need for photodiode to be connected \nGPIO.setmode(GPIO.BCM) # Not sure\nGPIO.setwarnings(False) # Not sure\n# Sets pins as digital in pins\nGPIO.setup(photodiode_filtered,GPIO.IN) ",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "photodiode_filtered",
        "kind": 5,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "photodiode_filtered = 3\nuv = 4\npir = 5\n# NB: No need for photodiode to be connected \nGPIO.setmode(GPIO.BCM) # Not sure\nGPIO.setwarnings(False) # Not sure\n# Sets pins as digital in pins\nGPIO.setup(photodiode_filtered,GPIO.IN) \nGPIO.setup(uv,GPIO.IN)\nGPIO.setup(pir,GPIO.IN) ",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "uv",
        "kind": 5,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "uv = 4\npir = 5\n# NB: No need for photodiode to be connected \nGPIO.setmode(GPIO.BCM) # Not sure\nGPIO.setwarnings(False) # Not sure\n# Sets pins as digital in pins\nGPIO.setup(photodiode_filtered,GPIO.IN) \nGPIO.setup(uv,GPIO.IN)\nGPIO.setup(pir,GPIO.IN) \ndef light(): # In the format (artificial, natural)",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "pir",
        "kind": 5,
        "importPath": "sensorInterpretationCode",
        "description": "sensorInterpretationCode",
        "peekOfCode": "pir = 5\n# NB: No need for photodiode to be connected \nGPIO.setmode(GPIO.BCM) # Not sure\nGPIO.setwarnings(False) # Not sure\n# Sets pins as digital in pins\nGPIO.setup(photodiode_filtered,GPIO.IN) \nGPIO.setup(uv,GPIO.IN)\nGPIO.setup(pir,GPIO.IN) \ndef light(): # In the format (artificial, natural)\n    return (GPIO.input(photodiode_filtered) == 1, GPIO.input(uv) == 1)",
        "detail": "sensorInterpretationCode",
        "documentation": {}
    },
    {
        "label": "getSunTimes",
        "kind": 2,
        "importPath": "sunTimes",
        "description": "sunTimes",
        "peekOfCode": "def getSunTimes():\n    reponse = requests.get(f\"https://api.sunrise-sunset.org/json?lat={LATITUDE}&lng={LONGITUDE}\")\n    with open(r\"C:\\Users\\user\\Documents\\Homework\\Young Engineers\\API\\suntimes.json\", \"w\") as f: # File is here for development purposes; not actually needed\n        f.seek(0) # Allows overwriting\n        json.dump(response, f, indent=4) # Dumps json file",
        "detail": "sunTimes",
        "documentation": {}
    },
    {
        "label": "LATITUDE",
        "kind": 5,
        "importPath": "sunTimes",
        "description": "sunTimes",
        "peekOfCode": "LATITUDE = 0.0\nLONGITUDE = 0.0\ndef getSunTimes():\n    reponse = requests.get(f\"https://api.sunrise-sunset.org/json?lat={LATITUDE}&lng={LONGITUDE}\")\n    with open(r\"C:\\Users\\user\\Documents\\Homework\\Young Engineers\\API\\suntimes.json\", \"w\") as f: # File is here for development purposes; not actually needed\n        f.seek(0) # Allows overwriting\n        json.dump(response, f, indent=4) # Dumps json file",
        "detail": "sunTimes",
        "documentation": {}
    },
    {
        "label": "LONGITUDE",
        "kind": 5,
        "importPath": "sunTimes",
        "description": "sunTimes",
        "peekOfCode": "LONGITUDE = 0.0\ndef getSunTimes():\n    reponse = requests.get(f\"https://api.sunrise-sunset.org/json?lat={LATITUDE}&lng={LONGITUDE}\")\n    with open(r\"C:\\Users\\user\\Documents\\Homework\\Young Engineers\\API\\suntimes.json\", \"w\") as f: # File is here for development purposes; not actually needed\n        f.seek(0) # Allows overwriting\n        json.dump(response, f, indent=4) # Dumps json file",
        "detail": "sunTimes",
        "documentation": {}
    }
]